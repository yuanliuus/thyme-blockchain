on:
  push:
    # Sequence of patterns matched against refs/tags
    branches: [main] 
#     tags:
#     - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build-for-windows:
    name: Upload Release Asset
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Build
        id: build
        run: |
          pwd
          ./build_scripts/build_windows.ps1
          pwd
          tar -czvf ./daemon.tar.gz ./thyme-blockchain-gui/daemon
          echo "::set-output name=exec_path::./daemon.tar.gz"
          ls -al
        continue-on-error: true
#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: Release ${{ github.ref }}
#           draft: false
#          prerelease: false
#       - name: Upload Release Asset
#         id: upload-release-asset 
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#           asset_path: ${{ steps.build.outputs.exec_path }}
#           asset_name: chia_plot
#           asset_content_type: application/excutable

#  build-for-Windows:
#     # The type of runner that the job will run on
#     runs-on: windows-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#     - uses: actions/checkout@v2
#     - name: Installing utilities
#       run: |
#           winget install libgmp3-dev
